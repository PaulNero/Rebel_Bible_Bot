import asyncio
import logging
import csv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import re

load_dotenv()

TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
LINK = os.getenv("LINK")

CSV_FILE = "REBEL_BIBLE_BOT.csv"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Survey(StatesGroup):
    name_city = State()
    price = State()
    brands = State()
    contact = State()

def get_brands_keyboard(selected_brands):
    keyboard = []
    brands = ["Reuzel", "Lock Stock", "Morgan‚Äôs", "REBEL", "Dream Catcher", "Boy's Toys", "KONDOR", "NishMan",
              "White Cosmetics", "London Grooming"]

    for brand in brands:
        text = f"‚úÖ {brand}" if brand in selected_brands else brand
        keyboard.append([InlineKeyboardButton(text=text, callback_data=f"brand_{brand}")])
    if selected_brands:
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="cancel_brand")])
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_brands")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

price_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–µ—à–µ–≤–ª–µ 800 —Ä—É–±."), KeyboardButton(text="800‚Äì1000 —Ä—É–±.")],
        [KeyboardButton(text="1000‚Äì1400 —Ä—É–±."), KeyboardButton(text="1400‚Äì2000 —Ä—É–±.")],
        [KeyboardButton(text="2000‚Äì3000 —Ä—É–±."), KeyboardButton(text="–°–≤—ã—à–µ 3000 —Ä—É–±.")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è) –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –∏ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –∏ –∂–∏–≤–µ—à—å?üôÇ")
    await state.set_state(Survey.name_city)

@dp.message(Survey.name_city)
async def process_name_city(message: types.Message, state: FSMContext):
    await state.update_data(name_city=message.text, username=message.from_user.username)
    await message.answer("–ö–∞–π—Ñ! –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æü§ó –°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–∞–π—Å—É —Å—Ç–æ–∏—Ç —É—Å–ª—É–≥–∞ ¬´–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞¬ª?",
                         reply_markup=price_keyboard)
    await state.set_state(Survey.price)

@dp.message(Survey.price)
async def process_price(message: types.Message, state: FSMContext):
    if message.text not in ["–î–µ—à–µ–≤–ª–µ 800 —Ä—É–±.", "800‚Äì1000 —Ä—É–±.", "1000‚Äì1400 —Ä—É–±.", "1400‚Äì2000 —Ä—É–±.", "2000‚Äì3000 —Ä—É–±.",
                            "–°–≤—ã—à–µ 3000 —Ä—É–±."]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞. \n\n–ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É üéõ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞.")
        return
    await state.update_data(price=message.text)
    await message.answer("–ù–æ—Ä–º-–Ω–æ—Ä–º)) –ê –Ω–∞ –∫–∞–∫–∏—Ö –±—Ä–µ–Ω–¥–∞—Ö –∫–æ—Å–º–µ—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)",
                         reply_markup=get_brands_keyboard([]))
    await state.set_state(Survey.brands)


@dp.callback_query(Survey.brands)
async def process_brand(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_brands = data.get("brands", [])

    if callback.data.startswith("brand_"):
        brand = callback.data.replace("brand_", "")

        if brand in selected_brands:
            selected_brands.remove(brand)  # –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
        else:
            selected_brands.append(brand)
        await state.update_data(brands=selected_brands)
    elif callback.data == "cancel_brand" and selected_brands:
        selected_brands.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        await state.update_data(brands=selected_brands)
    elif callback.data == "finish_brands":
        await callback.message.delete_reply_markup()
        await callback.message.answer(

            "–ö—Ä—É—Ç—è–∫!üëè –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –∏ –≥–∞–π–¥ —Ç–≤–æ–π! –ù–∞–ø–∏—à–∏ –Ω–∏–∫ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: @ahuennyi_barber, +79999999999).")

        await state.set_state(Survey.contact)
        return
    await callback.message.edit_reply_markup(reply_markup=get_brands_keyboard(selected_brands))
    await callback.answer()

@dp.message(Survey.contact)
async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    file_exists = os.path.isfile(CSV_FILE)
    with open(CSV_FILE, "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow(["‚Ññ", "–ò–º—è –∏ –ì–æ—Ä–æ–¥", "Username", "–¶–µ–Ω–∞", "–ë—Ä–µ–Ω–¥—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"])
        row_num = sum(1 for _ in open(CSV_FILE)) if file_exists else 1
        row_num = max(row_num, 0)
        writer.writerow(
            [row_num, data.get("name_city"), data.get("username"), data.get("price"), ", ".join(data.get("brands", [])),
             data.get("contact")])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ê–Ω–∫–µ—Ç—ã –≤ –∫–∞–Ω–∞–ª
    survey_text = (f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!\n\n"
                   f"üë§ –ò–º—è –∏ –≥–æ—Ä–æ–¥: {data.get('name_city')}\n"
                   f"üîó Username: @{data.get('username')}\n"
                   f"üí∞ –¶–µ–Ω–∞: {data.get('price')}\n"
                   f"üíÑ –ë—Ä–µ–Ω–¥—ã: {', '.join(data.get('brands', []))}\n"
                   f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data.get('contact')}")
    await bot.send_message(CHANNEL_ID, survey_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ CSV-—Ñ–∞–π–ª–∞ –≤ –∫–∞–Ω–∞–ª
    await bot.send_document(CHANNEL_ID, types.FSInputFile(CSV_FILE))

    await message.answer(
        f"–†–µ—Å–ø–µ–∫—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å, –∑–∞–±–∏—Ä–∞–π –≥–∞–π–¥! {LINK} \n–ò –¥–∞, –∑–Ω–∞–π, —á—Ç–æ —è –∂–¥—É, –∫–æ–≥–¥–∞ –æ —Ç–µ–±–µ —É–∑–Ω–∞—é—Ç –í–°–ï!))")
    await state.clear()

async def main():
    await bot.delete_webhook(drop_pending_updates=False)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
