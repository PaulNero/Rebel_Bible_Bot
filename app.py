import asyncio
import logging
import csv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import data
import re

TOKEN = data.TOKEN
CHANNEL_ID = data.CHANNEL_ID
CSV_FILE = "REBEL_BIBLE_BOT.csv"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Survey(StatesGroup):
    price = State()
    brands = State()
    form = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∏–∂–∫–∏
price_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–µ—à–µ–≤–ª–µ 800 —Ä—É–±."), KeyboardButton(text="800‚Äì1000 —Ä—É–±.")],
        [KeyboardButton(text="1000‚Äì1400 —Ä—É–±."), KeyboardButton(text="1400‚Äì2000 —Ä—É–±.")],
        [KeyboardButton(text="2000‚Äì3000 —Ä—É–±."), KeyboardButton(text="–°–≤—ã—à–µ 3000 —Ä—É–±.")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏
def get_brands_keyboard(selected_brands):
    keyboard = []
    brands = ["Reuzel", "Lock Stock", "Morgan‚Äôs", "REBEL", "NishMan", "Dream Catcher", "Boy's Toys", "KONDOR",
              "White Cosmetics", "Maestro"]
    for brand in brands:
        text = f"‚úÖ {brand}" if brand in selected_brands else brand
        keyboard.append([InlineKeyboardButton(text=text, callback_data=f"brand_{brand}")])
    if selected_brands:
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="cancel_brand")])
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_brands")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–∞–π–¥, –ø—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å. –≠—Ç–æ –∑–∞–π–º–µ—Ç 20 —Å–µ–∫—É–Ω–¥")
    await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∏–∂–∫–∏ –ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–∞–π—Å—É?", reply_markup=price_keyboard)
    await state.set_state(Survey.price)


@dp.message(Survey.price)
async def process_price(message: types.Message, state: FSMContext):
    if message.text not in ["–î–µ—à–µ–≤–ª–µ 800 —Ä—É–±.", "800‚Äì1000 —Ä—É–±.", "1000‚Äì1400 —Ä—É–±.", "1400‚Äì2000 —Ä—É–±.", "2000‚Äì3000 —Ä—É–±.",
                            "–°–≤—ã—à–µ 3000 —Ä—É–±."]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(price=message.text)
    await message.answer("–ù–∞ –∫–∞–∫–∏—Ö –±—Ä–µ–Ω–¥–∞—Ö –∫–æ—Å–º–µ—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å? (–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞)",
                         reply_markup=get_brands_keyboard([]))
    await state.set_state(Survey.brands)


@dp.callback_query(Survey.brands)
async def process_brand(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_brands = data.get("brands", [])

    if callback.data.startswith("brand_"):
        brand = callback.data.replace("brand_", "")
        if brand in selected_brands:
            selected_brands.remove(brand)  # –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–µ–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
        else:
            selected_brands.append(brand)  # –î–æ–±–∞–≤–ª—è–µ—Ç –±—Ä–µ–Ω–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω
        await state.update_data(brands=selected_brands)

    elif callback.data == "cancel_brand" and selected_brands:
        selected_brands.pop()
        await state.update_data(brands=selected_brands)

    elif callback.data == "finish_brands":
        await callback.message.delete_reply_markup()  # –°–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.answer("–ì–∞–π–¥ –ø–æ—á—Ç–∏ —Ç–≤–æ–π! –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É.")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û: ")
        await state.set_state(Survey.form)
        return

    await callback.message.edit_reply_markup(reply_markup=get_brands_keyboard(selected_brands))
    await callback.answer()


@dp.message(Survey.form)
async def process_form(message: types.Message, state: FSMContext):
    data = await state.get_data()
    form_data = data.get("form", [])
    form_data.append(message.text)
    await state.update_data(form=form_data)
    if len(form_data) == 1:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    elif len(form_data) == 2:
        phone_pattern = re.compile(r"^\+\d{10,15}$")
        if not phone_pattern.match(form_data[1]):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79111234567")
            form_data.pop()
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ Instagram:")

    elif len(form_data) == 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")

    else:
        telegram_id = message.from_user.id
        telegram_username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        await state.update_data(contact={
            "–§–ò–û": form_data[0],
            "–¢–µ–ª–µ—Ñ–æ–Ω": form_data[1],
            "Instagram": form_data[2],
            "–ì–æ—Ä–æ–¥": form_data[3],
            "Telegram ID": telegram_id,
            "Telegram Username": telegram_username
        })
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–π–¥: {data.LINK}")
        file_exists = os.path.isfile(CSV_FILE)
        with open(CSV_FILE, mode='a', newline='') as file:
            writer = csv.writer(file)
            if not file_exists:
                writer.writerow(["‚Ññ", "–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", "–ë—Ä–µ–Ω–¥—ã", "–§–ò–û", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "Instagram", "–ì–æ—Ä–æ–¥", "Telegram ID",
                                 "Telegram Username"])
            row_num = sum(1 for _ in open(CSV_FILE)) if file_exists else 0
            writer.writerow(
                [row_num, data['price'], data['brands'], form_data[0], form_data[1], form_data[2], form_data[3], telegram_id,
                 telegram_username])
        await bot.send_document(CHANNEL_ID, types.FSInputFile(CSV_FILE))
        message_text = (f"üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
                        f"*–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:* {data['price']}\n"
                        f"*–ë—Ä–µ–Ω–¥—ã:* {data['brands']}\n"
                        f"*–§–ò–û:* {form_data[0]}\n"
                        f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {form_data[1]}\n"
                        f"*–°—Å—ã–ª–∫–∞ –Ω–∞ Instagram:* https://instagram.com/{form_data[2]}\n"
                        f"*–ì–æ—Ä–æ–¥:* {form_data[3]}\n"
                        f"*Telegram ID:* {telegram_id}\n"
                        f"*Telegram Username:* @{telegram_username}")
        await bot.send_message(CHANNEL_ID, message_text, parse_mode="Markdown")
        await state.clear()


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
